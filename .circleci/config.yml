version: 2.1

orbs:
  anchore: anchore/anchore-engine@1.7.0

experimental:
  notify:
    branches:
      only:
        - master

defaults: &defaults
  docker:
    - image: circleci/node:10
  working_directory: ~/repo

jobs:
  test:
    <<: *defaults
    environment:
      MOCHA_FILE: results/my-test-output.xml
      JUNIT_REPORT_PATH: results/my-test-output.xml
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-node10-{{ checksum "package.json" }}
          - v1-dependencies-node10-
      - run: make deps swagger cover report-coverage
      - store_test_results:
          path: results
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-node10-{{ checksum "package.json" }}

  build_docker:
    executor: anchore/anchore_engine
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
          - v1-dependencies-node10-{{ checksum "package.json" }}
          - v1-dependencies-node10-
      - run: docker build --pull --build-arg="snyk_token=${SNYK_TOKEN}" -t registry.replicated.com/library/retraced:${CIRCLE_SHA1:0:7} -f deploy/Dockerfile-slim .
      - anchore/analyze_local_image:
          image_name: registry.replicated.com/library/retraced:${CIRCLE_SHA1:0:7}
          dockerfile_path: ./deploy/Dockerfile-slim
          policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
          policy_failure: true
      - anchore/parse_reports
      - run: docker save -o retraced.tar registry.replicated.com/library/retraced:${CIRCLE_SHA1:0:7}
      - persist_to_workspace:
          root: .
          paths:
            - ./retraced.tar

  build_postgres:
    executor: anchore/anchore_engine
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run: docker build --pull -t registry.replicated.com/library/retraced-postgres:${CIRCLE_SHA1:0:7} -f deploy/Dockerfile-postgres .
      - anchore/analyze_local_image:
          image_name: registry.replicated.com/library/retraced-postgres:${CIRCLE_SHA1:0:7}
          dockerfile_path: ./deploy/Dockerfile-postgres
          policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
          policy_failure: true
      - anchore/parse_reports
      - run: docker save -o retraced-postgres.tar registry.replicated.com/library/retraced-postgres:${CIRCLE_SHA1:0:7}
      - persist_to_workspace:
          root: .
          paths:
            - ./retraced-postgres.tar

  build_nsq:
    executor: anchore/anchore_engine
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker
      - run: docker build --pull -t registry.replicated.com/library/retraced-nsq:${CIRCLE_SHA1:0:7} -f deploy/Dockerfile-nsq .
      - anchore/analyze_local_image:
          image_name: registry.replicated.com/library/retraced-nsq:${CIRCLE_SHA1:0:7}
          dockerfile_path: ./deploy/Dockerfile-nsq
          policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
          policy_failure: true
      - anchore/parse_reports
      - run: docker save -o retraced-nsq.tar registry.replicated.com/library/retraced-nsq:${CIRCLE_SHA1:0:7}
      - persist_to_workspace:
          root: .
          paths:
            - ./retraced-nsq.tar

  deploy_unstable:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run: docker load -i /tmp/workspace/retraced.tar
      - run: docker load -i /tmp/workspace/retraced-postgres.tar
      - run: docker load -i /tmp/workspace/retraced-nsq.tar
      - run: docker tag registry.replicated.com/library/retraced:${CIRCLE_SHA1:0:7} registry.replicated.com/library/retraced:alpha
      - run: docker login -u="$REPLICATED_LIBRARY_USER" -p="$REPLICATED_LIBRARY_PASSWORD" registry.replicated.com
      - deploy:
          command: docker push registry.replicated.com/library/retraced:${CIRCLE_SHA1:0:7}
      - deploy:
          command: docker push registry.replicated.com/library/retraced-postgres:${CIRCLE_SHA1:0:7}
      - deploy:
          command: docker push registry.replicated.com/library/retraced-nsq:${CIRCLE_SHA1:0:7}
      - deploy:
          command: docker push registry.replicated.com/library/retraced:alpha

  ensure_image_exists:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: docker login -u="$REPLICATED_LIBRARY_USER" -p="$REPLICATED_LIBRARY_PASSWORD" registry.replicated.com
      - run:  |
          docker pull registry.replicated.com/library/retraced:${CIRCLE_SHA1:0:7}
          docker pull registry.replicated.com/library/retraced-postgres:${CIRCLE_SHA1:0:7}
          docker pull registry.replicated.com/library/retraced-nsq:${CIRCLE_SHA1:0:7}

  deploy_stable:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
          - v1-dependencies-node10-{{ checksum "package.json" }}
          - v1-dependencies-node10-
      - run: docker login -u="$REPLICATED_LIBRARY_USER" -p="$REPLICATED_LIBRARY_PASSWORD" registry.replicated.com
      # the original idea here was:
      #
      #    don't build, just pull. This ensures we're releasing the SHA that we just built and tested
      #
      # but since we don't really have a SaaS env to test this in right now, we're going to need
      # to come up with some other way to integration test this, ideally as part of tagged build
      - run: |
          docker pull registry.replicated.com/library/retraced:${CIRCLE_SHA1:0:7}
          docker pull registry.replicated.com/library/retraced-postgres:${CIRCLE_SHA1:0:7}
          docker pull registry.replicated.com/library/retraced-nsq:${CIRCLE_SHA1:0:7}
      - run: |
          function semverParseInto() { # thanks cloudflare
              local RE='[^0-9]*\([0-9]*\)[.]\([0-9]*\)[.]\([0-9]*\)\([0-9A-Za-z-]*\)'
              eval $2=`echo $1 | sed -e "s#$RE#\1#"`
              eval $3=`echo $1 | sed -e "s#$RE#\2#"`
              eval $4=`echo $1 | sed -e "s#$RE#\3#"`
              eval $5=`echo $1 | sed -e "s#$RE#\4#"`
          }
          semverParseInto "$CIRCLE_TAG" MAJOR MINOR PATCH SPECIAL

          if [ -n "$SPECIAL" ]; then
              echo "pre-release != release, so just push the tag and exit"

              docker tag registry.replicated.com/library/retraced:${CIRCLE_SHA1:0:7} registry.replicated.com/library/retraced:${CIRCLE_TAG}
              docker push registry.replicated.com/library/retraced:${CIRCLE_TAG}
              exit 0
          fi

          docker tag registry.replicated.com/library/retraced:${CIRCLE_SHA1:0:7} registry.replicated.com/library/retraced:stable
          docker tag registry.replicated.com/library/retraced:${CIRCLE_SHA1:0:7} registry.replicated.com/library/retraced:latest
          docker push registry.replicated.com/library/retraced:stable
          docker push registry.replicated.com/library/retraced:latest

          docker tag registry.replicated.com/library/retraced:${CIRCLE_SHA1:0:7} registry.replicated.com/library/retraced:${MAJOR}
          docker push registry.replicated.com/library/retraced:${MAJOR}
          docker tag registry.replicated.com/library/retraced:${CIRCLE_SHA1:0:7} registry.replicated.com/library/retraced:${MAJOR}.${MINOR}
          docker push registry.replicated.com/library/retraced:${MAJOR}.${MINOR}
          docker tag registry.replicated.com/library/retraced:${CIRCLE_SHA1:0:7} registry.replicated.com/library/retraced:${MAJOR}.${MINOR}.${PATCH}
          docker push registry.replicated.com/library/retraced:${MAJOR}.${MINOR}.${PATCH}

          docker tag registry.replicated.com/library/retraced-postgres:${CIRCLE_SHA1:0:7} registry.replicated.com/library/retraced-postgres:${MAJOR}.${MINOR}.${PATCH}
          docker push registry.replicated.com/library/retraced-postgres:${MAJOR}.${MINOR}.${PATCH}

          docker tag registry.replicated.com/library/retraced-nsq:${CIRCLE_SHA1:0:7} registry.replicated.com/library/retraced-nsq:${MAJOR}.${MINOR}.${PATCH}
          docker push registry.replicated.com/library/retraced-nsq:${MAJOR}.${MINOR}.${PATCH}

  is_retracedhq:
    <<: *defaults
    steps:
      - run: |
          if [ "${CIRCLE_PROJECT_USERNAME}" != "retracedhq" ]; then
            echo nope nope nope
            exit 1
          fi


workflows:
  version: 2
  unstable:
    jobs:
      - test
      - build_docker:
          requires:
            - test
      - build_postgres:
          requires:
            - test
      - build_nsq:
          requires:
            - test
      - is_retracedhq:
          filters:
            branches:
              only: /v1.4/
      - deploy_unstable:
          requires:
            - build_docker
            - build_postgres
            - build_nsq
            - is_retracedhq
          filters:
            branches:
              only: /v1.4/

  stable_prod:
    jobs:
      - test:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
      - is_retracedhq:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
      - ensure_image_exists:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
      - deploy_stable:
          requires:
            - ensure_image_exists
            - test
            - is_retracedhq
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*(-.*)*/
            branches:
              ignore: /.*/
