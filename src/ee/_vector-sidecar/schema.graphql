type AllocatedBytes {
  # Metric timestamp
  timestamp: DateTime

  # Allocated bytes
  allocatedBytes: Float!
}

interface Component {
  componentId: String!
  componentType: String!
}

type ComponentAllocatedBytes {
  # Component id
  componentId: String!

  # Allocated bytes metric
  metric: AllocatedBytes!
}

type ComponentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ComponentEdge!]!

  # A list of nodes.
  nodes: [Component!]!

  # Total result set count
  totalCount: Int!
}

# An edge in a connection.
type ComponentEdge {
  # The item at the end of the edge
  node: Component!

  # A cursor for use in pagination
  cursor: String!
}

type ComponentErrorsTotal {
  # Component id
  componentId: String!

  # Errors processed metric
  metric: ErrorsTotal!
}

enum ComponentKind {
  SOURCE
  TRANSFORM
  SINK
}

input ComponentKindFilter {
  equals: ComponentKind
  notEquals: ComponentKind
}

type ComponentReceivedBytesThroughput {
  # Component ID.
  componentId: String!

  # Throughput of bytes sent.
  throughput: Int!
}

type ComponentReceivedBytesTotal {
  # Component ID.
  componentId: String!

  # Metric for total bytes received.
  metric: ReceivedBytesTotal!
}

type ComponentReceivedEventsThroughput {
  # Component id
  componentId: String!

  # Received events throughput
  throughput: Int!
}

type ComponentReceivedEventsTotal {
  # Component id
  componentId: String!

  # Total received events metric
  metric: ReceivedEventsTotal!
}

type ComponentSentBytesThroughput {
  # Component ID.
  componentId: String!

  # Throughput of bytes sent.
  throughput: Int!
}

type ComponentSentBytesTotal {
  # Component ID.
  componentId: String!

  # Metric for total bytes sent.
  metric: SentBytesTotal!
}

type ComponentSentEventsThroughput {
  # Component id
  componentId: String!

  # Total events processed throughput
  throughput: Int!

  # Output streams with throughputs
  outputs: [OutputThroughput!]!
}

type ComponentSentEventsTotal {
  # Component id
  componentId: String!

  # Total outgoing events metric
  metric: SentEventsTotal!

  # Output streams with outgoing events metrics
  outputs: [Output!]!
}

input ComponentsFilter {
  componentId: [StringFilter!]
  componentKind: [ComponentKindFilter!]
  or: [ComponentsFilter!]
}

input ComponentsSortField {
  field: ComponentsSortFieldName!
  direction: Direction! = ASC
}

enum ComponentsSortFieldName {
  COMPONENT_KEY
  COMPONENT_KIND
}

type CpuMetrics {
  # CPU seconds total
  cpuSecondsTotal: Float!
}

# Implement the DateTime<Utc> scalar
#
# The input/output is a string in RFC3339 format.
scalar DateTime

enum Direction {
  ASC
  DESC
}

type DiskMetrics {
  # Total bytes read
  readBytesTotal: Float!

  # Total reads completed
  readsCompletedTotal: Float!

  # Total bytes written
  writtenBytesTotal: Float!

  # Total writes completed
  writesCompletedTotal: Float!
}

type ErrorsTotal {
  # Metric timestamp
  timestamp: DateTime

  # Total error count
  errorsTotal: Float!
}

# Encoding format for the event
enum EventEncodingType {
  JSON
  YAML
  LOGFMT
}

# A notification regarding events observation
type EventNotification {
  # Notification details
  notification: Notification!

  # The human-readable message associated with the notification
  message: String!
}

type FileSourceMetricFile {
  # File name
  name: String!

  # Metric indicating bytes received for the current file
  receivedBytesTotal: ReceivedBytesTotal

  # Metric indicating received events for the current file
  receivedEventsTotal: ReceivedEventsTotal

  # Metric indicating outgoing events for the current file
  sentEventsTotal: SentEventsTotal
}

type FileSourceMetricFileConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileSourceMetricFileEdge!]!

  # A list of nodes.
  nodes: [FileSourceMetricFile!]!

  # Total result set count
  totalCount: Int!
}

# An edge in a connection.
type FileSourceMetricFileEdge {
  # The item at the end of the edge
  node: FileSourceMetricFile!

  # A cursor for use in pagination
  cursor: String!
}

input FileSourceMetricFilesSortField {
  field: FileSourceMetricFilesSortFieldName!
  direction: Direction! = ASC
}

enum FileSourceMetricFilesSortFieldName {
  NAME
  RECEIVED_BYTES_TOTAL
  RECEIVED_EVENTS_TOTAL
  SENT_EVENTS_TOTAL
}

type FileSourceMetrics implements SourceMetrics {
  # File metrics
  files(
    after: String
    before: String
    first: Int
    last: Int
    filter: FileSourceMetricsFilesFilter
    sort: [FileSourceMetricFilesSortField!]
  ): FileSourceMetricFileConnection!

  # Total received bytes for the current file source
  receivedBytesTotal: ReceivedBytesTotal

  # Total received events for the current file source
  receivedEventsTotal: ReceivedEventsTotal

  # Total sent events for the current file source
  sentEventsTotal: SentEventsTotal
}

input FileSourceMetricsFilesFilter {
  name: [StringFilter!]
  or: [FileSourceMetricsFilesFilter!]
}

type FileSystemMetrics {
  # Free bytes
  freeBytes: Float!

  # Total bytes
  totalBytes: Float!

  # Used bytes
  usedBytes: Float!
}

type GenericSinkMetrics implements SinkMetrics {
  # Total received events for the current sink
  receivedEventsTotal: ReceivedEventsTotal

  # Total sent bytes for the current sink
  sentBytesTotal: SentBytesTotal

  # Total sent events for the current sink
  sentEventsTotal: SentEventsTotal
}

type GenericSourceMetrics implements SourceMetrics {
  # Total received bytes for the current source
  receivedBytesTotal: ReceivedBytesTotal

  # Total received events for the current source
  receivedEventsTotal: ReceivedEventsTotal

  # Total sent events for the current source
  sentEventsTotal: SentEventsTotal
}

type GenericTransformMetrics implements TransformMetrics {
  # Total received events for the current transform
  receivedEventsTotal: ReceivedEventsTotal

  # Total sent events for the current transform
  sentEventsTotal: SentEventsTotal
}

type Heartbeat {
  utc: DateTime!
}

# Vector host metrics
type HostMetrics {
  # Memory metrics
  memory: MemoryMetrics!

  # Swap metrics
  swap: SwapMetrics!

  # CPU metrics
  cpu: CpuMetrics!

  # Load average metrics (*nix only)
  loadAverage: LoadAverageMetrics

  # Network metrics
  network: NetworkMetrics!

  # Filesystem metrics
  filesystem: FileSystemMetrics!

  # Disk metrics
  disk: DiskMetrics!
}

# The pattern matched source(s) which cannot be tapped for inputs or sink(s)
# which cannot be tapped for outputs
type InvalidMatch {
  # Pattern that raised the notification
  pattern: String!

  # Any invalid matches for the pattern
  invalidMatches: [String!]!
}

type LoadAverageMetrics {
  # Load 1 average
  load1: Float!

  # Load 5 average
  load5: Float!

  # Load 15 average
  load15: Float!
}

# Log event with fields for querying log data
type Log {
  # Id of the component associated with the log event
  componentId: String!

  # Type of component associated with the log event
  componentType: String!

  # Kind of component associated with the log event
  componentKind: String!

  # Log message
  message: String

  # Log timestamp
  timestamp: DateTime

  # Log event as an encoded string format
  string(encoding: EventEncodingType!): String!

  # Get JSON field data on the log event, by field name
  json(field: String!): String
}

# A component was found that matched the provided pattern
type Matched {
  # Pattern that raised the notification
  pattern: String!
}

# Host memory metrics
type MemoryMetrics {
  # Total bytes
  totalBytes: Float!

  # Free bytes
  freeBytes: Float!

  # Available bytes
  availableBytes: Float!

  # Active bytes (Linux/macOS only)
  activeBytes: Float

  # Buffers bytes (Linux only)
  buffersBytes: Float

  # Cached bytes (Linux only)
  cachedBytes: Float

  # Shared bytes (Linux only)
  sharedBytes: Float

  # Used bytes (Linux only)
  usedBytes: Float

  # Inactive bytes (macOS only)
  inactiveBytes: Float

  # Wired bytes (macOS only)
  wiredBytes: Float
}

type Meta {
  # Vector version
  versionString: String!

  # Hostname
  hostname: String
}

# Metric event with fields for querying metric data
type Metric {
  # Id of the component associated with the metric event
  componentId: String!

  # Type of component associated with the metric event
  componentType: String!

  # Kind of component associated with the metric event
  componentKind: String!

  # Metric timestamp
  timestamp: DateTime

  # Metric name
  name: String!

  # Metric namespace
  namespace: String

  # Metric kind
  kind: MetricKind!

  # Metric type
  valueType: String!

  # Metric value in human readable form
  value: String!

  # Metric tags
  tags: [MetricTag!]

  # Metric event as an encoded string format
  string(encoding: EventEncodingType!): String!
}

enum MetricKind {
  # Incremental metrics update previous values
  INCREMENTAL

  # Absolute metrics set the reference value for future updates
  ABSOLUTE
}

type MetricTag {
  # Metric tag key
  key: String!

  # Metric tag value
  value: String!
}

interface MetricType {
  timestamp: DateTime
}

type NetworkMetrics {
  # Total bytes received
  receiveBytesTotal: Float!

  # Total errors received
  receiveErrsTotal: Float!

  # Total packets received
  receivePacketsTotal: Float!

  # Total bytes transmitted
  transmitBytesTotal: Float!

  # Total errors transmitted
  transmitErrsTotal: Float!

  # Total transmission packets dropped (Linux/Windows only)
  transmitPacketsDropTotal: Float

  # Total transmission packets (Linux/Windows only)
  transmitPacketsTotal: Float
}

# There isn't currently a component that matches this pattern
type NotMatched {
  # Pattern that raised the notification
  pattern: String!
}

# A specific kind of notification with additional details
union Notification = Matched | NotMatched | InvalidMatch

type Output {
  # Id of the output stream
  outputId: String!

  # Total sent events for the current output stream
  sentEventsTotal: SentEventsTotal
}

# An event or a notification
union OutputEventsPayload = Log | Metric | EventNotification | Trace

type OutputThroughput {
  # Id of the output stream
  outputId: String!

  # Throughput for the output stream
  throughput: Int!
}

# Information about pagination in a connection
type PageInfo {
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Returns `true` to denote the GraphQL server is reachable
  health: Boolean!

  # Configured components (sources/transforms/sinks)
  components(
    after: String
    before: String
    first: Int
    last: Int
    filter: ComponentsFilter
    sort: [ComponentsSortField!]
  ): ComponentConnection!

  # Configured sources
  sources(
    after: String
    before: String
    first: Int
    last: Int
    filter: SourcesFilter
    sort: [SourcesSortField!]
  ): SourceConnection!

  # Configured transforms
  transforms(
    after: String
    before: String
    first: Int
    last: Int
    filter: TransformsFilter
    sort: [TransformsSortField!]
  ): TransformConnection!

  # Configured sinks
  sinks(
    after: String
    before: String
    first: Int
    last: Int
    filter: SinksFilter
    sort: [SinksSortField!]
  ): SinkConnection!

  # Gets a configured component by component_key
  componentByComponentKey(componentId: String!): Component

  # Vector host metrics
  hostMetrics: HostMetrics!
  meta: Meta!
}

type ReceivedBytesTotal {
  # Metric timestamp.
  timestamp: DateTime

  # Total number of bytes received.
  receivedBytesTotal: Float!
}

type ReceivedEventsTotal {
  # Metric timestamp
  timestamp: DateTime

  # Total incoming events
  receivedEventsTotal: Float!
}

type SentBytesTotal {
  # Metric timestamp.
  timestamp: DateTime

  # Total number of bytes sent.
  sentBytesTotal: Float!
}

type SentEventsTotal {
  # Metric timestamp
  timestamp: DateTime

  # Total sent events
  sentEventsTotal: Float!
}

type Sink implements Component {
  # Sink component_id
  componentId: String!

  # Sink type
  componentType: String!

  # Source inputs
  sources: [Source!]!

  # Transform inputs
  transforms: [Transform!]!

  # Sink metrics
  metrics: SinkMetrics!
}

type SinkConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SinkEdge!]!

  # A list of nodes.
  nodes: [Sink!]!

  # Total result set count
  totalCount: Int!
}

# An edge in a connection.
type SinkEdge {
  # The item at the end of the edge
  node: Sink!

  # A cursor for use in pagination
  cursor: String!
}

interface SinkMetrics {
  receivedEventsTotal: ReceivedEventsTotal
  sentBytesTotal: SentBytesTotal
  sentEventsTotal: SentEventsTotal
}

input SinksFilter {
  componentId: [StringFilter!]
  componentType: [StringFilter!]
  or: [SinksFilter!]
}

input SinksSortField {
  field: SinksSortFieldName!
  direction: Direction! = ASC
}

enum SinksSortFieldName {
  COMPONENT_KEY
  COMPONENT_TYPE
}

type Source implements Component {
  # Source component_id
  componentId: String!

  # Source type
  componentType: String!

  # Source output type
  outputTypes: [SourceOutputType!]!

  # Source output streams
  outputs: [Output!]!

  # Transform outputs
  transforms: [Transform!]!

  # Sink outputs
  sinks: [Sink!]!

  # Source metrics
  metrics: SourceMetrics!
}

type SourceConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SourceEdge!]!

  # A list of nodes.
  nodes: [Source!]!

  # Total result set count
  totalCount: Int!
}

# An edge in a connection.
type SourceEdge {
  # The item at the end of the edge
  node: Source!

  # A cursor for use in pagination
  cursor: String!
}

interface SourceMetrics {
  receivedBytesTotal: ReceivedBytesTotal
  receivedEventsTotal: ReceivedEventsTotal
  sentEventsTotal: SentEventsTotal
}

enum SourceOutputType {
  LOG
  METRIC
  TRACE
}

input SourceOutputTypeFilter {
  equals: [SourceOutputType!]
  notEquals: [SourceOutputType!]
  contains: SourceOutputType
  notContains: SourceOutputType
}

input SourcesFilter {
  componentId: [StringFilter!]
  componentType: [StringFilter!]
  outputType: [SourceOutputTypeFilter!]
  or: [SourcesFilter!]
}

input SourcesSortField {
  field: SourcesSortFieldName!
  direction: Direction! = ASC
}

enum SourcesSortFieldName {
  COMPONENT_KEY
  COMPONENT_TYPE
  OUTPUT_TYPE
}

# Filter for String values
input StringFilter {
  equals: String
  notEquals: String
  contains: String
  notContains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  # Heartbeat, containing the UTC timestamp of the last server-sent payload
  heartbeat(interval: Int! = 1000): Heartbeat!

  # Metrics for how long the Vector instance has been running
  uptime(interval: Int! = 1000): Uptime!

  # Total received events metrics
  receivedEventsTotal(interval: Int! = 1000): ReceivedEventsTotal!
    @deprecated(reason: "Use component_received_events_totals instead")

  # Total received events throughput sampled over the provided millisecond `interval`
  receivedEventsThroughput(interval: Int! = 1000): Int!
    @deprecated(reason: "Use component_received_events_throughputs instead")

  # Total incoming component events throughput metrics over `interval`
  componentReceivedEventsThroughputs(interval: Int! = 1000): [ComponentReceivedEventsThroughput!]!

  # Total received component event metrics over `interval`
  componentReceivedEventsTotals(interval: Int! = 1000): [ComponentReceivedEventsTotal!]!

  # Total sent events metrics
  sentEventsTotal(interval: Int! = 1000): SentEventsTotal!
    @deprecated(reason: "Use component_sent_events_totals instead")

  # Total outgoing events throughput sampled over the provided millisecond `interval`
  sentEventsThroughput(interval: Int! = 1000): Int!
    @deprecated(reason: "Use component_sent_events_throughputs instead")

  # Total outgoing component event throughput metrics over `interval`
  componentSentEventsThroughputs(interval: Int! = 1000): [ComponentSentEventsThroughput!]!

  # Total outgoing component event metrics over `interval`
  componentSentEventsTotals(interval: Int! = 1000): [ComponentSentEventsTotal!]!

  # Component bytes received metrics over `interval`.
  componentReceivedBytesTotals(interval: Int! = 1000): [ComponentReceivedBytesTotal!]!

  # Component bytes received throughput over `interval`
  componentReceivedBytesThroughputs(interval: Int! = 1000): [ComponentReceivedBytesThroughput!]!

  # Component bytes sent metrics over `interval`.
  componentSentBytesTotals(interval: Int! = 1000): [ComponentSentBytesTotal!]!

  # Component bytes sent throughput over `interval`
  componentSentBytesThroughputs(interval: Int! = 1000): [ComponentSentBytesThroughput!]!

  # Total error metrics.
  errorsTotal(interval: Int! = 1000): ErrorsTotal!

  # Allocated bytes metrics.
  allocatedBytes(interval: Int! = 1000): AllocatedBytes!

  # Component allocation metrics
  componentAllocatedBytes(interval: Int! = 1000): [ComponentAllocatedBytes!]!

  # Component error metrics over `interval`.
  componentErrorsTotals(interval: Int! = 1000): [ComponentErrorsTotal!]!

  # All metrics.
  metrics(interval: Int! = 1000): MetricType!

  # Subscribes to all newly added components
  componentAdded: Component!

  # Subscribes to all removed components
  componentRemoved: Component!

  # A stream of events emitted from matched component ID patterns
  outputEventsByComponentIdPatterns(
    outputsPatterns: [String!]!
    inputsPatterns: [String!]
    interval: Int! = 500
    limit: Int! = 100
  ): [OutputEventsPayload!]!
}

type SwapMetrics {
  # Swap free bytes
  freeBytes: Float!

  # Swap total bytes
  totalBytes: Float!

  # Swap used bytes
  usedBytes: Float!

  # Swapped in bytes total (not available on Windows)
  swappedInBytesTotal: Float

  # Swapped out bytes total (not available on Windows)
  swappedOutBytesTotal: Float
}

# Trace event with fields for querying trace data
type Trace {
  # Id of the component associated with the trace event
  componentId: String!

  # Type of component associated with the trace event
  componentType: String!

  # Kind of component associated with the trace event
  componentKind: String!

  # Trace event as an encoded string format
  string(encoding: EventEncodingType!): String!

  # Get JSON field data on the trace event, by field name
  json(field: String!): String
}

type Transform implements Component {
  # Transform component_id
  componentId: String!

  # Transform type
  componentType: String!

  # Transform output streams
  outputs: [Output!]!

  # Source inputs
  sources: [Source!]!

  # Transform outputs
  transforms: [Transform!]!

  # Sink outputs
  sinks: [Sink!]!

  # Transform metrics
  metrics: TransformMetrics!
}

type TransformConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TransformEdge!]!

  # A list of nodes.
  nodes: [Transform!]!

  # Total result set count
  totalCount: Int!
}

# An edge in a connection.
type TransformEdge {
  # The item at the end of the edge
  node: Transform!

  # A cursor for use in pagination
  cursor: String!
}

interface TransformMetrics {
  receivedEventsTotal: ReceivedEventsTotal
  sentEventsTotal: SentEventsTotal
}

input TransformsFilter {
  componentId: [StringFilter!]
  componentType: [StringFilter!]
  or: [TransformsFilter!]
}

input TransformsSortField {
  field: TransformsSortFieldName!
  direction: Direction! = ASC
}

enum TransformsSortFieldName {
  COMPONENT_KEY
  COMPONENT_TYPE
}

type Uptime implements MetricType {
  # Metric timestamp
  timestamp: DateTime

  # Number of seconds the Vector instance has been alive
  seconds: Float!
}
