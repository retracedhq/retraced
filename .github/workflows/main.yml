name: CI

on:
  push:
    branches:
      - "*"
    tags:
      - "beta-v*"
  pull_request_target:
    types: [opened, synchronize, reopened]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Schedule
  schedule:
    - cron: "0 8 * * MON,THU" # Run every Monday and Thursday at 08:00 UTC

jobs:
  ci:
    runs-on: ubuntu-latest
    outputs:
      NPM_VERSION: ${{ steps.version.outputs.NPM_VERSION }}
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3
      - run: npm install
      - run: npm run lint
      - run: make build
      - run: npm run cover
      - id: version
        run: |
          npm install -g json
          JACKSON_VERSION=$(echo $(cat ./package.json) | json version)

          echo "NPM_VERSION=${JACKSON_VERSION}" >> $GITHUB_OUTPUT

  build:
    needs: ci
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Check Out Repo
        uses: actions/checkout@v3

      - run: echo ${{ needs.ci.outputs.NPM_VERSION }}

      - name: Get short SHA
        id: slug
        run: echo "SHA7=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/release'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push
        if: github.ref == 'refs/heads/release'
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: ./
          file: ./deploy/Dockerfile-slim
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ github.repository }}:latest,${{ github.repository }}:${{ steps.slug.outputs.SHA7 }},${{ github.repository }}:${{ needs.ci.outputs.NPM_VERSION }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Login to GitHub Container Registry
        if: github.ref == 'refs/heads/release'
        run: |
          echo "${{secrets.GITHUB_TOKEN}}" | docker login ghcr.io -u ${{github.repository_owner}} --password-stdin

      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Check install!
        run: cosign version

      - name: place the cosign private key in a file
        run: 'echo "$COSIGN_KEY" > /tmp/cosign.key'
        shell: bash
        env:
          COSIGN_KEY: ${{secrets.COSIGN_KEY}}

      - name: Sign the image
        if: github.ref == 'refs/heads/release'
        run: cosign sign --key /tmp/cosign.key ${{ github.repository }}:${{ steps.slug.outputs.SHA7 }} || true
        env:
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}

      - name: Create SBOM Report [SPDX]
        uses: anchore/sbom-action@v0
        with:
          format: spdx
          artifact-name: retraced_sbom.spdx
      - name: Publish report [SPDX]
        uses: anchore/sbom-action/publish-sbom@v0
        with:
          sbom-artifact-match: ".*\\.spdx$"
      - name: Create SBOM Report [CycloneDx]
        uses: anchore/sbom-action@v0
        with:
          format: cyclonedx
          artifact-name: retraced_sbom.cyclonedx
      - name: Publish report [CycloneDx]
        uses: anchore/sbom-action/publish-sbom@v0
        with:
          sbom-artifact-match: ".*\\.cyclonedx$"
      - name: Download artifact for SPDX Report
        uses: actions/download-artifact@v3
        with:
          name: retraced_sbom.spdx
      - name: Download artifact for CycloneDx Report
        uses: actions/download-artifact@v3
        with:
          name: retraced_sbom.cyclonedx
      - name: Remove older SBOMs
        run: rm -rf ./sbom*.* || true
      - name: Move SPDX Report
        run: mv retraced_sbom.spdx "./sbom.spdx"
      - name: Move CycloneDx Report
        run: mv retraced_sbom.cyclonedx "./sbom.cyclonedx"
      # - name: Scan docker image using TERN
      #   #if: github.ref == 'refs/heads/release'
      #   uses: philips-labs/tern-action@v1.2.0
      #   id: scan
      #   with:
      #     image: ${{ github.repository }}:latest
      #     format: spdxtagvalue
      #     output: docker_sbom.spdx
      - name: Create/Clear folder
        run: mkdir -p ./_docker/ && rm -rf ./_docker/*.* || true
      - name: Docker CycloneDx report
        run: npm install -g @appthreat/cdxgen && cdxgen ${{ github.repository }}:latest -o ./_docker/sbom.xml -t docker
      - name: Move Report & cleanup
        run: |
          mv docker_sbom.spdx "./docker_sbom.spdx" || true
          rm results.sarif || true
          rm ./_docker/sbom.json || true
          mv ./_docker/sbom.xml ./docker_sbom.cyclonedx || true
      - name: ORAS Setup & Push SBOM reports to GitHub Container Registry
        if: github.ref == 'refs/heads/release'
        run: |
          ORAS_VERSION="0.8.1"
          ORAS_FILENAME="oras_0.8.1_linux_amd64.tar.gz"
          curl -LO "https://cdn.bundle.bar/clients/oras/${ORAS_VERSION}/${ORAS_FILENAME}"
          mkdir oras_install
          tar -xvf "${ORAS_FILENAME}" -C oras_install
          ./oras_install/oras push ghcr.io/${{github.repository_owner}}/retraced/sbom:service-${{ steps.slug.outputs.SHA7 }} ./sbom.*
          cd _docker || true
          ../oras_install/oras push ghcr.io/${{github.repository_owner}}/retraced/sbom:docker-${{ steps.slug.outputs.SHA7 }} ./sbom.* || true
          cd ..

      - name: Sign the sbom images
        if: github.ref == 'refs/heads/release'
        run: |
          cosign sign --key /tmp/cosign.key ghcr.io/${{github.repository_owner}}/retraced/sbom:service-${{ steps.slug.outputs.SHA7 }} || true
          cosign sign --key /tmp/cosign.key ghcr.io/${{github.repository_owner}}/retraced/sbom:docker-${{ steps.slug.outputs.SHA7 }} || true
        env:
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
