name: CI

on:
  push:
    branches:
      - main
      - release
    tags:
      - "beta-v*"
  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Schedule
  schedule:
    - cron: "0 8 * * MON,THU" # Run every Monday and Thursday at 08:00 UTC

jobs:
  ci:
    runs-on: ubuntu-latest
    outputs:
      NPM_VERSION: ${{ steps.version.outputs.NPM_VERSION }}
      PUBLISH_TAG: ${{ steps.version.outputs.PUBLISH_TAG }}
      IMAGE_SUFFIX: ${{ steps.version.outputs.IMAGE_SUFFIX }}
    strategy:
      matrix:
        node-version: [20]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          check-latest: true
      - run: node -v
      - run: npm -v

      - name: Install Dependencies & check lint
        run: |
          npm install
          npm run check-format
          npm run lint

      - id: version
        run: |
          npm install -g json
          RETRACED_VERSION=$(echo $(cat ./package.json) | json version)

          publishTag="latest"
          imageSuffix=""

          if [[ "$GITHUB_REF" == *\/release ]]
          then
            echo "Release branch"
          else
            echo "Dev branch"
            publishTag="beta"
            imageSuffix="-beta"
            RETRACED_VERSION="${RETRACED_VERSION}-beta.${GITHUB_RUN_NUMBER}"
          fi

          echo "NPM_VERSION=${RETRACED_VERSION}" >> $GITHUB_OUTPUT
          echo "PUBLISH_TAG=${publishTag}" >> $GITHUB_OUTPUT
          echo "IMAGE_SUFFIX=${imageSuffix}" >> $GITHUB_OUTPUT

  test:
    needs: ci
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          check-latest: true
      - run: node -v
      - run: npm -v

      - name: Run docker-compose up
        id: docker_compose
        uses: isbang/compose-action@v2.0.0
        with:
          compose-file: "./docker-compose.yaml"

      - name: Run tests
        run: |
          npm install
          npm run build
          npm run cover:all

  test-pg-search:
    needs: ci
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          check-latest: true
      - run: node -v
      - run: npm -v

      - name: Run docker-compose up
        id: docker_compose
        uses: isbang/compose-action@v2.0.0
        with:
          compose-file: "./docker-compose.yaml"
        env:
          PG_SEARCH: "true"

      - name: Run tests
        run: |
          npm install
          npm run build
          npm run cover:all

  build:
    needs: [ci, test, test-pg-search]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]

    steps:
      - run: echo ${{ needs.ci.outputs.NPM_VERSION }}
      - run: echo ${{ needs.ci.outputs.PUBLISH_TAG }}
      - name: Check Out Repo
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          check-latest: true

      - name: Get short SHA
        id: slug
        run: |
          echo "SHA7=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT
          imagePath="${{ secrets.DOCKER_HUB_USERNAME }}/retraced"
          sidecarPath="${{ secrets.DOCKER_HUB_USERNAME }}/vector"

          if [[ "$GITHUB_REF" != *\/release ]]
          then
            imagePath="${{ secrets.DOCKER_HUB_USERNAME }}/retraced-beta"
            sidecarPath="${{ secrets.DOCKER_HUB_USERNAME }}/vector-beta"
          fi
          echo "${imagePath}"
          echo "${sidecarPath}"

          echo "RETRACED_IMAGE_PATH=${imagePath}" >> $GITHUB_OUTPUT
          echo "SIDECAR_IMAGE_PATH=${sidecarPath}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/release'
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        if: github.ref == 'refs/heads/release'
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/release'
        uses: docker/login-action@v3
        with:
          username: boxyhq
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Retraced
        if: github.ref == 'refs/heads/release'
        id: docker_build_retraced
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./deploy/Dockerfile-slim
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.slug.outputs.RETRACED_IMAGE_PATH }}:${{ needs.ci.outputs.PUBLISH_TAG }},${{ steps.slug.outputs.RETRACED_IMAGE_PATH }}:${{ steps.slug.outputs.SHA7 }},${{ steps.slug.outputs.RETRACED_IMAGE_PATH }}:${{ needs.ci.outputs.NPM_VERSION }}

      - name: Build and push Sidecar
        if: github.ref == 'refs/heads/release'
        id: docker_build_sidecar
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./deploy/sidecar/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.slug.outputs.SIDECAR_IMAGE_PATH }}:${{ needs.ci.outputs.PUBLISH_TAG }},${{ steps.slug.outputs.SIDECAR_IMAGE_PATH }}:${{ steps.slug.outputs.SHA7 }},${{ steps.slug.outputs.SIDECAR_IMAGE_PATH }}:${{ needs.ci.outputs.NPM_VERSION }}

      - name: Image digest Retraced
        if: github.ref == 'refs/heads/release'
        run: echo ${{ steps.docker_build_retraced.outputs.digest }}

      - name: Image digest Sidecar
        if: github.ref == 'refs/heads/release'
        run: echo ${{ steps.docker_build_sidecar.outputs.digest }}

      - name: Login to GitHub Container Registry
        if: github.ref == 'refs/heads/release'
        run: |
          echo "${{secrets.GITHUB_TOKEN}}" | docker login ghcr.io -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Install Cosign
        if: github.ref == 'refs/heads/release'
        uses: sigstore/cosign-installer@main

      - name: Check install!
        if: github.ref == 'refs/heads/release'
        run: cosign version

      - name: place the cosign private key in a file
        if: github.ref == 'refs/heads/release'
        run: 'echo "$COSIGN_KEY" > /tmp/cosign.key'
        shell: bash
        env:
          COSIGN_KEY: ${{secrets.COSIGN_KEY}}

      - name: Sign the image [Retraced]
        if: github.ref == 'refs/heads/release'
        run: cosign sign --key /tmp/cosign.key -y ${{ steps.slug.outputs.RETRACED_IMAGE_PATH }}@${{ steps.docker_build_retraced.outputs.digest }}
        env:
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}

      - name: Sign the image [Sidecar]
        if: github.ref == 'refs/heads/release'
        run: cosign sign --key /tmp/cosign.key -y ${{ steps.slug.outputs.SIDECAR_IMAGE_PATH }}@${{ steps.docker_build_sidecar.outputs.digest }}
        env:
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}

      - name: Create SBOM Report [SPDX]
        uses: anchore/sbom-action@v0
        with:
          format: spdx
          artifact-name: retraced_sbom.spdx
          upload-artifact-retention: 1

      - name: Publish report [SPDX]
        uses: anchore/sbom-action/publish-sbom@v0
        with:
          sbom-artifact-match: ".*\\.spdx$"

      - name: Create SBOM Report [CycloneDx]
        uses: anchore/sbom-action@v0
        with:
          format: cyclonedx
          artifact-name: retraced_sbom.cyclonedx
          upload-artifact-retention: 1

      - name: Publish report [CycloneDx]
        uses: anchore/sbom-action/publish-sbom@v0
        with:
          sbom-artifact-match: ".*\\.cyclonedx$"

      - name: Download artifact for SPDX Report
        if: github.ref == 'refs/heads/release'
        uses: actions/download-artifact@v3
        with:
          name: retraced_sbom.spdx

      - name: Download artifact for CycloneDx Report
        if: github.ref == 'refs/heads/release'
        uses: actions/download-artifact@v3
        with:
          name: retraced_sbom.cyclonedx

      - name: Remove older SBOMs
        if: github.ref == 'refs/heads/release'
        run: rm -rf ./sbom*.* || true

      - name: Move SPDX Report
        if: github.ref == 'refs/heads/release'
        run: mv retraced_sbom.spdx "./sbom.spdx"

      - name: Move CycloneDx Report
        if: github.ref == 'refs/heads/release'
        run: mv retraced_sbom.cyclonedx "./sbom.cyclonedx"

      - name: Create SBOM Report [Docker][SPDX][Retraced]
        if: github.ref == 'refs/heads/release'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.slug.outputs.RETRACED_IMAGE_PATH }}:${{ needs.ci.outputs.PUBLISH_TAG }}
          format: spdx
          artifact-name: retraced_docker_sbom.spdx
          upload-artifact-retention: 1

      - name: Create SBOM Report [Docker][SPDX][Sidecar]
        if: github.ref == 'refs/heads/release'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.slug.outputs.SIDECAR_IMAGE_PATH }}:${{ needs.ci.outputs.PUBLISH_TAG }}
          format: spdx
          artifact-name: sidecar_docker_sbom.spdx
          upload-artifact-retention: 1

      - name: Publish report [Docker][SPDX]
        if: github.ref == 'refs/heads/release'
        uses: anchore/sbom-action/publish-sbom@v0
        with:
          sbom-artifact-match: ".*\\.spdx$"

      - name: Create SBOM Report [Docker][CycloneDx][Retraced]
        if: github.ref == 'refs/heads/release'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.slug.outputs.RETRACED_IMAGE_PATH }}:${{ needs.ci.outputs.PUBLISH_TAG }}
          format: cyclonedx
          artifact-name: retraced_docker_sbom.cyclonedx
          upload-artifact-retention: 1

      - name: Create SBOM Report [Docker][CycloneDx][Sidecar]
        if: github.ref == 'refs/heads/release'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.slug.outputs.SIDECAR_IMAGE_PATH }}:${{ needs.ci.outputs.PUBLISH_TAG }}
          format: cyclonedx
          artifact-name: sidecar_docker_sbom.cyclonedx
          upload-artifact-retention: 1

      - name: Publish report [Docker][CycloneDx]
        if: github.ref == 'refs/heads/release'
        uses: anchore/sbom-action/publish-sbom@v0
        with:
          sbom-artifact-match: ".*\\.cyclonedx$"

      - name: Download artifact for SPDX Report [Docker][Retraced]
        if: github.ref == 'refs/heads/release'
        uses: actions/download-artifact@v3
        with:
          name: retraced_docker_sbom.spdx

      - name: Download artifact for SPDX Report [Docker][Sidecar]
        if: github.ref == 'refs/heads/release'
        uses: actions/download-artifact@v3
        with:
          name: sidecar_docker_sbom.spdx

      - name: Download artifact for CycloneDx Report [Docker][Retraced]
        if: github.ref == 'refs/heads/release'
        uses: actions/download-artifact@v3
        with:
          name: retraced_docker_sbom.cyclonedx

      - name: Download artifact for CycloneDx Report [Docker][Sidecar]
        if: github.ref == 'refs/heads/release'
        uses: actions/download-artifact@v3
        with:
          name: sidecar_docker_sbom.cyclonedx

      - name: Create/Clear folder [Docker]
        if: github.ref == 'refs/heads/release'
        run: mkdir -p ./_docker/ && rm -rf ./_docker/*.* || true

      - name: Move Report & cleanup [Docker]
        if: github.ref == 'refs/heads/release'
        run: |
          mv retraced_docker_sbom.spdx "./_docker/retraced_sbom.spdx" || true
          mv retraced_docker_sbom.cyclonedx ./_docker/retraced_sbom.cyclonedx || true
          mv sidecar_docker_sbom.spdx "./_docker/sidecar_sbom.spdx" || true
          mv sidecar_docker_sbom.cyclonedx ./_docker/sidecar_sbom.cyclonedx || true

      - name: ORAS Setup
        if: github.ref == 'refs/heads/release'
        run: |
          ORAS_VERSION="v0.8.1"
          ORAS_FILENAME="oras_0.8.1_linux_amd64.tar.gz"
          curl -LO "https://github.com/oras-project/oras/releases/download/${ORAS_VERSION}/${ORAS_FILENAME}"
          mkdir oras_install
          tar -xvf "${ORAS_FILENAME}" -C oras_install

      - name: Push SBOM reports to GitHub Container Registry & Sign the sbom images
        if: github.ref == 'refs/heads/release'
        run: |
          result=$(./oras_install/oras push ghcr.io/${{ github.repository }}/sbom${{ needs.ci.outputs.IMAGE_SUFFIX }}:service-${{ needs.ci.outputs.NPM_VERSION }} ./sbom.*)
          ORAS_DIGEST=$(echo $result | grep -oE 'sha256:[a-f0-9]{64}')
          if [ -z "$ORAS_DIGEST" ]; then
            echo "Error: ORAS_DIGEST is empty"
            exit 1
          fi
          cosign sign -y --key /tmp/cosign.key ghcr.io/${{ github.repository }}/sbom${{ needs.ci.outputs.IMAGE_SUFFIX }}@${ORAS_DIGEST}
          cd _docker || true
          result=$(../oras_install/oras push ghcr.io/${{ github.repository }}/sbom${{ needs.ci.outputs.IMAGE_SUFFIX }}:docker-${{ needs.ci.outputs.NPM_VERSION }} ./*sbom.*)
          ORAS_DIGEST=$(echo $result | grep -oE 'sha256:[a-f0-9]{64}')
          if [ -z "$ORAS_DIGEST" ]; then
            echo "Error: ORAS_DIGEST is empty"
            exit 1
          fi
          cosign sign -y --key /tmp/cosign.key ghcr.io/${{ github.repository }}/sbom${{ needs.ci.outputs.IMAGE_SUFFIX }}@${ORAS_DIGEST}
          cd ..
        env:
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
